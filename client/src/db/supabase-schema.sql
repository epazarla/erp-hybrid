-- Kullanıcılar tablosu
CREATE TABLE IF NOT EXISTS users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  username TEXT UNIQUE NOT NULL,
  phone TEXT,
  avatar TEXT,
  role TEXT,
  department TEXT,
  is_active BOOLEAN DEFAULT FALSE,
  status TEXT DEFAULT 'pending_approval',
  approval_status TEXT DEFAULT 'pending',
  registration_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  approval_date TIMESTAMP WITH TIME ZONE,
  approved_by BIGINT REFERENCES users(id),
  tasks_count INTEGER DEFAULT 0,
  completed_tasks_count INTEGER DEFAULT 0,
  password TEXT NOT NULL, -- Gerçek uygulamada hash'lenmelidir
  team_id BIGINT,
  is_admin BOOLEAN DEFAULT FALSE,
  permissions TEXT[],
  last_login TIMESTAMP WITH TIME ZONE,
  failed_login_attempts INTEGER DEFAULT 0,
  password_reset_token TEXT,
  password_reset_expires TIMESTAMP WITH TIME ZONE
);

-- Row Level Security (RLS) politikaları
ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- Herkes kendi bilgilerini görebilir
CREATE POLICY "Kullanıcılar kendi bilgilerini görebilir" ON users
  FOR SELECT USING (auth.uid() = id);

-- Kullanıcılar kendi bilgilerini güncelleyebilir
CREATE POLICY "Kullanıcılar kendi bilgilerini güncelleyebilir" ON users
  FOR UPDATE USING (auth.uid() = id);

-- Adminler tüm kullanıcıları görebilir ve düzenleyebilir
CREATE POLICY "Adminler tüm kullanıcıları yönetebilir" ON users
  USING (EXISTS (SELECT 1 FROM users WHERE id = auth.uid() AND is_admin = TRUE));

-- Yeni kullanıcı kaydı için public politika
CREATE POLICY "Herkes yeni kullanıcı kaydı yapabilir" ON users
  FOR INSERT WITH CHECK (TRUE);

-- Kullanıcı onay durumu değişikliği için indeks
CREATE INDEX IF NOT EXISTS users_approval_status_idx ON users (approval_status);

-- Departman ve rol için indeksler
CREATE INDEX IF NOT EXISTS users_department_idx ON users (department);
CREATE INDEX IF NOT EXISTS users_role_idx ON users (role);
